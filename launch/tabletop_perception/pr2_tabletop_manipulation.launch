<launch>
  <!-- set stereo to true for narrow stereo, false for kinect -->
  <arg name="stereo" default="false" />
  <arg name="use_slip_controllers" default="false"/>
  <arg name="use_right_arm" default="true"/>
  <arg name="use_left_arm" default="true"/>
  <arg name="use_task_cartesian" default="false"/>
  <arg name="log_to_warehouse" default="false"/>
  <arg name="flatten_table" default="false"/>
  <arg name="kinect_frame_prefix" default="/camera"/>
  <arg name="kinect_camera_name" default="head_mount_kinect" />
  <arg name="sim" default="false"/>
  <arg name="use_octomap_filtering" default="true" />

  <!-- client for object database running on remote server at Willow Garage -->
  <!-- DOES NOT WORK IN TRUNK RIGHT NOW -->
  <!--
  <include file="$(find household_objects_database)/launch/objects_database_remote_client.launch"/>
  -->

  <!-- alternative option: database server running on a local machine -->
  <rosparam command="load" file="$(find household_objects_database)/config/wgs36.yaml"/>
  <node pkg="household_objects_database" name="objects_database_node" type="objects_database_node" 
  	respawn="true" output="screen"/>    

  <!-- manipulation prerequisites -->
  <include file="$(find ros_launches)/launch/tabletop_perception/pr2_manipulation_prerequisites.launch">
    <arg name="stereo" value="$(arg stereo)"/>    
    <arg name="use_left_arm" value="$(arg use_left_arm)"/>    
    <arg name="use_right_arm" value="$(arg use_right_arm)"/>    
    <arg name="use_octomap_filtering" value="$(arg use_octomap_filtering)"/>
  </include>

  <!-- manipulation -->
  <include file="$(find ros_launches)/launch/tabletop_perception/pr2_manipulation.launch">
    <arg name="use_slip_controllers" value="$(arg use_slip_controllers)"/>
    <arg name="use_left_arm" value="$(arg use_left_arm)"/>
    <arg name="use_right_arm" value="$(arg use_right_arm)"/>
    <arg name="use_task_cartesian" value="$(arg use_task_cartesian)"/>
	<arg name="sim" value="$(arg sim)"/>
  </include>

  <!-- tabletop collision map processing -->
  <node pkg="tabletop_collision_map_processing" name="tabletop_collision_map_processing" 
        type="tabletop_collision_map_processing_node" respawn="false" output="screen"/>
  <param name="tabletop_collision_map_processing/get_model_mesh_srv" 
         value="/objects_database_node/get_model_mesh" />
  <param name="tabletop_collision_map_processing/static_map_cloud_name" value="full_cloud_filtered" />

  <!-- tabletop segmentation and object recognition -->
  <include file="$(find tabletop_object_detector)/launch/tabletop_complete.launch">
      <arg unless="$(arg stereo)" name="tabletop_segmentation_points_input" value="$(arg kinect_camera_name)/depth_registered/points"/>
      <arg if="$(arg stereo)" name="tabletop_segmentation_points_input" value="narrow_stereo_textured/points2"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>
  </include>

  <!-- cluster bounding box finder--> 
  <node name="cluster_bounding_box_finder" pkg="object_manipulator" cwd="node"
    type="cluster_bounding_box_finder_server.py" output="screen" respawn="false" >
	<param name="z_up_frame" value="/base_link" />
  </node>

</launch>
